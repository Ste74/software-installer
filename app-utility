#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# MIT License
#
# Copyright (c) 2018 Fredes Computer Service
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import collections
import json
import glob
import os
import gi

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib

TITLE = "Openbox Application Installer"


class MainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title=TITLE, border_width=6)
        GLib.set_prgname("app-utility")
        icon="system-software-install"
        pixbuf24 = Gtk.IconTheme.get_default().load_icon(icon, 24, 0)
        pixbuf32 = Gtk.IconTheme.get_default().load_icon(icon, 32, 0)
        pixbuf48 = Gtk.IconTheme.get_default().load_icon(icon, 48, 0)
        pixbuf64 = Gtk.IconTheme.get_default().load_icon(icon, 64, 0)
        pixbuf96 = Gtk.IconTheme.get_default().load_icon(icon, 96, 0)
        self.set_icon_list([pixbuf24, pixbuf32, pixbuf48, pixbuf64, pixbuf96])

        # set data
        self.selected_app = None
        self.install_pkg = []
        self.uninstall_pkg = []
        self.groups = []
        self.apps = self.get_app_data("./config/apps.json")

        # setup main box
        self.set_default_size(600, 600)
        self.main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.add(self.main_box)

        # create title box
        self.title_box = Gtk.Box()
        self.title_image = Gtk.Image()
        self.title_image.set_size_request(100, 100)
        self.title_image.set_from_file('./openbox.png')
        self.title_label = Gtk.Label()
        self.title_label.set_markup("<big>Openbox Application Installer</big>\n"
                                    "Select/Deselect apps you want to install/remove.\n"
                                    "Click 'FINISH' when ready.")
        self.title_box.pack_start(self.title_image, expand=False, fill=False, padding=0)
        self.title_box.pack_start(self.title_label, expand=True, fill=True, padding=0)

        # pack title box to main box
        self.main_box.pack_start(self.title_box, expand=False, fill=False, padding=0)

        # setup grid
        self.grid = Gtk.Grid()
        self.grid.set_column_homogeneous(True)
        self.grid.set_row_homogeneous(True)
        self.main_box.add(self.grid)

        # setup list store model
        self.app_store = Gtk.ListStore(str, str, str, bool, str, str)

        for group in self.apps:
            self.groups.append(group["gid"])
            for item in group["apps"]:
                list_item = (item["icon"],
                             item["name"],
                             item["description"],
                             False,
                             group["gid"],
                             item["pkg"])
                # get install status
                status = self.app_installed(item["pkg"])
                if status:
                    # change status to installed
                    list_item = (item["icon"],
                                 item["name"],
                                 item["description"],
                                 True,
                                 group["gid"],
                                 item["pkg"])
                # add to the store
                self.app_iter = self.app_store.append(list_item)

        # initial filter on first group
        self.current_filter_group = self.groups[0]

        # create a filter, feed it with the list store model
        self.group_filter = self.app_store.filter_new()
        self.group_filter.set_visible_func(self.group_filter_func)

        # create a treeview, using the filter, adding columns
        self.tree_view = Gtk.TreeView.new_with_model(self.group_filter)

        selected_row = self.tree_view.get_selection()
        selected_row.connect("changed", self.on_changed)

        # column model: icon
        renderer = Gtk.CellRendererPixbuf()
        column = Gtk.TreeViewColumn("", renderer, icon_name=0)
        self.tree_view.append_column(column)

        # column model: name column
        renderer = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("Application", renderer, text=1)
        self.tree_view.append_column(column)

        # column model: description column
        renderer = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("Description", renderer, text=2)
        self.tree_view.append_column(column)

        # column model: install column
        toggle_cell = Gtk.CellRendererToggle()
        toggle_cell.connect("toggled", self.on_toggle)
        column = Gtk.TreeViewColumn("Installed", toggle_cell)
        self.tree_view.append_column(column)

        # --------------------------------------  start button box ---------------------------------
        # create box with execute buttons
        self.button_box = Gtk.Box(spacing=10)
        # create filter buttons
        self.filter_buttons = list()
        for group in self.groups:
            button = Gtk.Button(label=group)
            self.filter_buttons.append(button)
            button.connect("clicked", self.on_filter_button_clicked)
            self.button_box.pack_start(button, expand=False, fill=False, padding=0)

        self.install_pkg_button = Gtk.Button(label="FINISH")
        self.install_pkg_button.connect("clicked", self.run_installer)

        self.button_box.pack_end(self.install_pkg_button, expand=False, fill=False, padding=0)
        # --------------------------------------  end  button box ---------------------------------

        # create a scrollable window
        self.app_window = Gtk.ScrolledWindow()
        self.app_window.set_vexpand(True)
        self.app_window.add(self.tree_view)

        self.grid.attach(self.app_window, 0, 0, 4, len(self.app_store))
        # pack button box
        self.main_box.pack_end(self.button_box, expand=False, fill=False, padding=10)
        self.show_all()

    def group_filter_func(self, groups, row, data):
        if self.current_filter_group is None or self.current_filter_group == "None":
            return True
        else:
            return groups[row][4] == self.current_filter_group

    def on_filter_button_clicked(self, widget):
        self.current_filter_group = widget.get_label()
        self.group_filter.refilter()

    def on_changed(self, selection):
        model, row = selection.get_selected()
        if row is not None:
            print(model[row][1])
            self.selected_app = model[row][1]

    def on_toggle(self, widget, path):
        pkg = self.selected_app
        state = None
        for app in self.app_store:
            if app[5] == pkg:
                if app[3] is True:
                    state = True
                else:
                    state = False
                break
        if state is False:
            if pkg in self.install_pkg:
                print("cancel: {}".format(pkg))
                self.install_pkg.remove(pkg)
            else:
                print("uninstall: {}".format(pkg))
                self.uninstall_pkg.append(pkg)
        else:
            print("install: {}".format(pkg))
            self.install_pkg.append(pkg)
        path.active = state

    def run_installer(self, widget):
        self.run_selection(self.install_pkg, self.uninstall_pkg)

    @staticmethod
    def app_installed(app):
        if glob.glob("/var/lib/pacman/local/{}-[0-9]*".format(app)):
            return True
        return False

    @staticmethod
    def get_app_data(filename, dictionary=True):
        """Read json data from file"""
        result = list()
        try:
            if dictionary:
                with open(filename, "rb") as infile:
                    result = json.loads(
                        infile.read().decode("utf8"),
                        object_pairs_hook=collections.OrderedDict)
            else:
                with open(filename, "r") as infile:
                    result = json.load(infile)
        except OSError:
            pass
        return result

    @staticmethod
    def run_selection(install_pkg, remove_pkg):
        install_file = "{}/install-packages.txt".format(os.environ["HOME"])
        remove_file = "{}/remove-packages.txt".format(os.environ["HOME"])

        with open(install_file, "w") as outfile:
            for p in install_pkg:
                outfile.write("{} ".format(p))

        with open(remove_file, "w") as outfile:
            for p in remove_pkg:
                outfile.write("{} ".format(p))

        os.system('gksu-polkit ./app-install')


win = MainWindow()
win.connect("delete-event", Gtk.main_quit)
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
